Junit:
------
A unit can be a function, a class, a package, or a subsystem. So, the term unit testing refers to the practice of testing
such small units of your code, so as to ensure that they work as expected. 

For example, we can test whether an output is what we expected for given some inputs or 
if a condition is true or false.

This practice helps developers to discover failures in their logic behind their code and 
improve the quality of their code. 

Also, unit testing can be used so as to ensure that the code will work as expected in case of future changes.


Junit Api->
Junit Assertion Api:->

Junit 5 libraries:-
-------------------
junit-jupiter-engine

junit 4libraries:
-------------------
junit.jar or junit-vintage-engine


JUnit annotations
------------------------

@Test
public void method() :   The Test annotation indicates that the public void method to which it is attached can be run as a test case.

@BeforeEach(junit 5) or (junit 4 or junt3 ->@Before)
public void method(): The BeforeEach  annotation indicates that this method must be executed before each test in the class,
 so as to execute some preconditions necessary for the test.

@BeforeAll (junit 5 ) or (junit 4 or junit 3 ->@BeforeClass)
public static void method(): The BeforeAll annotation indicates that the static method to which is 
attached must be executed once and before all tests in the class. 

That happens when the test methods share computationally expensive setup (e.g. connect to database).

@AfterEach(junit 5) or (junit 4 or junit 3-> @After)
public void method(): The After annotation indicates that this method gets executed after 
execution of each test (e.g. reset some variables after execution of every test, delete temporary variables etc)
 
@AfterAll (junit 5 ) or (junit 4 or junit 3 ->@AfterClass)
public static void method() : The AfterAll annotation can be used when a method needs to be executed 
after executing all the tests in a JUnit Test Case class so as to clean-up the expensive set-up
 (e.g disconnect from a database). 

Attention: The method attached with this annotation (similar to BeforeAll) must be defined as static.


@DisplayName
@ReapeatedTest()
@Tag
@Parameter
@Disable

Example:
------------

import static org.junit.Assert.*;
import java.util.*;
import org.junit.*;

public class AnnotationsTest {

	private ArrayList testList;

	@BeforeAll
	public static void onceExecutedBeforeAll() {
		System.out.println("@BeforeClass: onceExecutedBeforeAll");
	}

	@BeforeEach
	public void executedBeforeEach() {
		testList = new ArrayList();
		System.out.println("@Before: executedBeforeEach");
	}

	@AfterAll
	public static void onceExecutedAfterAll() {
		System.out.println("@AfterClass: onceExecutedAfterAll");
	}

	@AfterEach
	public void executedAfterEach() {
		testList.clear();
		System.out.println("@After: executedAfterEach");
	}

	@Test
	public void EmptyCollection() {
		assertTrue(testList.isEmpty());
		System.out.println("@Test: EmptyArrayList");

	}

	@Test
	public void OneItemCollection() {
		testList.add("oneItem");
		assertEquals(1, testList.size());
		System.out.println("@Test: OneItemArrayList");
	}

	@Disable
	public void executionIgnored() {

		System.out.println("@Ignore: This execution is ignored");
	}
}



JUnit assertions
******************
we will present a number of assertion methods. 
All those methods are provided by the Assert class which extends the class java.lang.Object and 
they are useful for writing tests so as to detect failures. 

In the table below there is a more detailed explanation of the most commonly used assertion methods.

Assertion				                                Description
-------------						---------------

void assertEquals([String message],			
expected value, actual value)			Asserts that two values are equal. Values might be type 					of int, short, long, byte, char or java.lang.Object. 
					The first argument is an optional String message.


void assertTrue([String message],
	boolean condition)			Asserts that a condition is true.


void assertFalse([String message],
	boolean condition)			Asserts that a condition is false.


void assertNotNull([String message],
	 java.lang.Object object)		Asserts that an object is not null.


void assertNull([String message], 
	java.lang.Object object)		Asserts that an object is null.

void assertSame([String message],
 java.lang.Object expected, 			Asserts that the two objects refer to the same object.
	java.lang.Object actual)	


void assertNotSame([String message],
 java.lang.Object unexpected,			Asserts that the two objects do not refer to the 			 java.lang.Object actual) 				same  object.



void assertArrayEquals([String message],                Asserts that the array expected and the resulted array 	expectedArray, resultArray)		are equal. The type of Array might be int, long, short, 					char, byte or java.lang.Object.
 

Examples:
-------------


public class AssertionsTest {

	@Test
	public void test() {
		String obj1 = "junit";
		String obj2 = "junit";
		String obj3 = "test";
		String obj4 = "test";
		String obj5 = null;

		int var1 = 1;
		int var2 = 2;
		int[] arithmetic1 = { 1, 2, 3 };
		int[] arithmetic2 = { 1, 2, 3 };

		assertEquals(obj1, obj2);

		assertSame(obj3, obj4);

		assertNotSame(obj2, obj4);

		assertNotNull(obj1);

		assertNull(obj5);

		assertTrue(var2>var1);

		assertArrayEquals(arithmetic1, arithmetic2);
	}

}

note:
------
In the class above we can see how these assert methods work:

1. The assertEquals() method will return normally if the two compared objects are equal, otherwise a failure          will be displayed in the JUnit window and the test will abort.
2. The assertSame() and assertNotSame() methods tests if two object references point to exactly the same      object.
3. The assertNull() and assertNotNull() methods test whether a variable is null or not null.
4. The assertTrue() and assertFalse() methods tests if a condition or a variable is true or false.
5. The assertArrayEquals() will compare the two arrays and if they are equal, the method will proceed without     errors. Otherwise, a failure will be displayed in the JUnit window and the test will abort.



Ex:2
-------
import java.util.Arrays;

public class FirstDayAtSchool {

	public String[] prepareMyBag() {
		String[] schoolbag = { "Books", "Notebooks", "Pens" };
		System.out.println("My school bag contains: "
				+ Arrays.toString(schoolbag));
		return schoolbag;
	}

	public String[] addPencils() {
		String[] schoolbag = { "Books", "Notebooks", "Pens", "Pencils" };
		System.out.println("Now my school bag contains: "
				+ Arrays.toString(schoolbag));
		return schoolbag;
	}
}

testCase for Ex2:
-----------------------


public class FirstDayAtSchoolTest {

	FirstDayAtSchool school = new FirstDayAtSchool();
	String[] bag1 = { "Books", "Notebooks", "Pens" };
	String[] bag2 = { "Books", "Notebooks", "Pens", "Pencils" };

	@Test
	public void testPrepareMyBag() {
		System.out.println("Inside testPrepareMyBag()");
		assertArrayEquals(bag1, school.prepareMyBag());
	}

	@Test
	public void testAddPencils() {
		System.out.println("Inside testAddPencils()");
		assertArrayEquals(bag2, school.addPencils());
	}

}




Creating suite tests:
----------------------------

we will see how to create suite tests. A test suite is a collection of some test cases from different classes that can be run all together using @RunWith and @Suite annotations.
This is very helpful if you have many test classes and you want to run them all together instead of running each test one at a time.
When a class is annotated with @RunWith, JUnit will invoke the class in which is annotated so as to run the tests, instead of using the runner built into JUnit.
Based on the classes of the previous sections, we can create two test classes. 
The one class will test the public method prepareMyBag() and the other test class will test the method addPencils(). Hence, we will eventually have the classes below:


import org.junit.runner.RunWith;
import org.junit.runners.Suite;

@RunWith(Suite.class)
@Suite.SuiteClasses({ PrepareMyBagTest.class, AddPencilsTest.class })
public class SuitTest {

}




@ParameterizedTest
===========
Use @ParameterizedTest annotation to execute a test multiple times but with different arguments.

We do not need to use @Test annotation, instead only @ParameterizedTest annotation is used on such tests.

We must declare at least one argument source that will provide the arguments for each invocation which will be 
consumed in the test method.























In the given example, testPalindrome will be invoked 2 times for each string in the @ValueSource annotation. 
We Can access the argument using the method parameter word.

Use name argument in the @ParameterizedTest annotation to customize the display message.


public class ValueSourceTest {

    // This test will run 3 times with different arguments
    @ParameterizedTest
    @ValueSource(ints = {1, 2, 3})
    void test_int_arrays(int arg) {
        assertTrue(arg > 0);
    }

    @ParameterizedTest(name = "#{index} - Run test with args={0}")
    @ValueSource(ints = {1, 2, 3})
    void test_int_arrays_custom_name(int arg) {
        assertTrue(arg > 0);
    }

    @ParameterizedTest(name = "#{index} - Run test with args={0}")
    @ValueSource(strings = {"apple", "banana", "orange"})
    void test_string_arrays_custom_name(String arg) {
        assertTrue(arg.length() > 1);
    }

}




public class ParameterizedTests 
{
	public boolean isPalindrome(String s) {
		return s == null ? false : StringUtils.reverse(s).equals(s);
	}
	
	@ParameterizedTest(name = "{index} - {0} is a palindrome")
	@ValueSource(strings = { "12321", "pop" })
	void testPalindrome(String word) {
	    assertTrue(isPalindrome(word));
	}
}